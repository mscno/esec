syntax = "proto3";

package esec;

import "google/protobuf/timestamp.proto";


option go_package = "github.com/mscno/esec/gen/proto/go/esec;esecpb";

// ESEC main service
service EsecService {
  // Project management
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse);

  // User registration
  rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse);

  // Public key retrieval
  rpc GetUserPublicKey(GetUserPublicKeyRequest) returns (GetUserPublicKeyResponse);

  // Per-user secrets
  rpc SetPerUserSecrets(SetPerUserSecretsRequest) returns (SetPerUserSecretsResponse);
  rpc GetPerUserSecrets(GetPerUserSecretsRequest) returns (GetPerUserSecretsResponse);

  // Creates a new team organization
  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse);

  // Lists organizations (currently TEAM organizations)
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse);

  // Gets a specific organization by ID
  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse);

  // Deletes a team organization by ID
  rpc DeleteOrganization(DeleteOrganizationRequest) returns (DeleteOrganizationResponse);
}

// Project information
message Project {
  string org = 1;
  string repo = 2;
  string org_repo = 3; // e.g., "org/repo"
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}

// User information
message User {
  string github_id = 1;
  string username = 2;
  string public_key = 3;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}

// Request/response for creating a project
message CreateProjectRequest {
  string org_repo = 1;
}

message CreateProjectResponse {
  string status = 1;
  string project = 2;
}

// Request/response for registering a user
message RegisterUserRequest {
  string public_key = 3;
}

message RegisterUserResponse {
  string status = 1;
}

// Request/response for getting a user's public key
message GetUserPublicKeyRequest {
  string github_id = 1;
}

message GetUserPublicKeyResponse {
  string github_id = 1;
  string username = 2;
  string public_key = 3;
}

// Per-user secrets for a project
message PerUserSecrets {
  string org_repo = 1;
  map<string, SecretMap> secrets = 2; // github_id -> SecretMap
}

message SecretMap {
  map<string, string> secrets = 1;
}

// Request/response for setting per-user secrets
message SetPerUserSecretsRequest {
  string org_repo = 1;
  map<string, SecretMap> secrets = 2;
}

message SetPerUserSecretsResponse {
  string status = 1;
}

// Request/response for getting per-user secrets
message GetPerUserSecretsRequest {
  string org_repo = 1;
}

message GetPerUserSecretsResponse {
  map<string, SecretMap> secrets = 1;
}

// Enum defining the type of organization
enum OrganizationType {
  ORGANIZATION_TYPE_UNSPECIFIED = 0;
  ORGANIZATION_TYPE_PERSONAL = 1;
  ORGANIZATION_TYPE_TEAM = 2;
}

// Represents an organization (personal or team)
message Organization {
  string id = 1; // GitHub org ID, username (for personal), or generated UUID (for team)
  string name = 2; // GitHub org/user login or team name
  string owner_github_id = 3; // GitHub ID of the user who owns/created this record
  OrganizationType type = 4; // Type of organization
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}

// Request to create a new TEAM organization
message CreateOrganizationRequest {
  string name = 1; // The desired name for the team organization
}

// Response for creating an organization
message CreateOrganizationResponse {
  Organization organization = 1; // The newly created organization
}

// Request to list organizations (potentially filtered in the future)
message ListOrganizationsRequest {
  // Future: Add filters like owner_id, type etc.
}

// Response containing a list of organizations
message ListOrganizationsResponse {
  repeated Organization organizations = 1;
}

// Request to get a specific organization by ID
message GetOrganizationRequest {
  string id = 1; // The ID of the organization to retrieve
}

// Response containing a single organization
message GetOrganizationResponse {
  Organization organization = 1;
}

// Request to delete an organization by ID
message DeleteOrganizationRequest {
  string id = 1; // The ID of the organization to delete
}

// Response for deleting an organization
message DeleteOrganizationResponse {
  string status = 1; // e.g., "organization deleted"
}
