// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: esec/esec.proto

package esecpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	esec "github.com/mscno/esec/gen/proto/go/esec"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EsecServiceName is the fully-qualified name of the EsecService service.
	EsecServiceName = "esec.EsecService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EsecServiceCreateProjectProcedure is the fully-qualified name of the EsecService's CreateProject
	// RPC.
	EsecServiceCreateProjectProcedure = "/esec.EsecService/CreateProject"
	// EsecServiceRegisterUserProcedure is the fully-qualified name of the EsecService's RegisterUser
	// RPC.
	EsecServiceRegisterUserProcedure = "/esec.EsecService/RegisterUser"
	// EsecServiceGetUserPublicKeyProcedure is the fully-qualified name of the EsecService's
	// GetUserPublicKey RPC.
	EsecServiceGetUserPublicKeyProcedure = "/esec.EsecService/GetUserPublicKey"
	// EsecServiceSetPerUserSecretsProcedure is the fully-qualified name of the EsecService's
	// SetPerUserSecrets RPC.
	EsecServiceSetPerUserSecretsProcedure = "/esec.EsecService/SetPerUserSecrets"
	// EsecServiceGetPerUserSecretsProcedure is the fully-qualified name of the EsecService's
	// GetPerUserSecrets RPC.
	EsecServiceGetPerUserSecretsProcedure = "/esec.EsecService/GetPerUserSecrets"
	// EsecServiceCreateOrganizationProcedure is the fully-qualified name of the EsecService's
	// CreateOrganization RPC.
	EsecServiceCreateOrganizationProcedure = "/esec.EsecService/CreateOrganization"
	// EsecServiceListOrganizationsProcedure is the fully-qualified name of the EsecService's
	// ListOrganizations RPC.
	EsecServiceListOrganizationsProcedure = "/esec.EsecService/ListOrganizations"
	// EsecServiceGetOrganizationProcedure is the fully-qualified name of the EsecService's
	// GetOrganization RPC.
	EsecServiceGetOrganizationProcedure = "/esec.EsecService/GetOrganization"
	// EsecServiceDeleteOrganizationProcedure is the fully-qualified name of the EsecService's
	// DeleteOrganization RPC.
	EsecServiceDeleteOrganizationProcedure = "/esec.EsecService/DeleteOrganization"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	esecServiceServiceDescriptor                  = esec.File_esec_esec_proto.Services().ByName("EsecService")
	esecServiceCreateProjectMethodDescriptor      = esecServiceServiceDescriptor.Methods().ByName("CreateProject")
	esecServiceRegisterUserMethodDescriptor       = esecServiceServiceDescriptor.Methods().ByName("RegisterUser")
	esecServiceGetUserPublicKeyMethodDescriptor   = esecServiceServiceDescriptor.Methods().ByName("GetUserPublicKey")
	esecServiceSetPerUserSecretsMethodDescriptor  = esecServiceServiceDescriptor.Methods().ByName("SetPerUserSecrets")
	esecServiceGetPerUserSecretsMethodDescriptor  = esecServiceServiceDescriptor.Methods().ByName("GetPerUserSecrets")
	esecServiceCreateOrganizationMethodDescriptor = esecServiceServiceDescriptor.Methods().ByName("CreateOrganization")
	esecServiceListOrganizationsMethodDescriptor  = esecServiceServiceDescriptor.Methods().ByName("ListOrganizations")
	esecServiceGetOrganizationMethodDescriptor    = esecServiceServiceDescriptor.Methods().ByName("GetOrganization")
	esecServiceDeleteOrganizationMethodDescriptor = esecServiceServiceDescriptor.Methods().ByName("DeleteOrganization")
)

// EsecServiceClient is a client for the esec.EsecService service.
type EsecServiceClient interface {
	// Project management
	CreateProject(context.Context, *connect.Request[esec.CreateProjectRequest]) (*connect.Response[esec.CreateProjectResponse], error)
	// User registration
	RegisterUser(context.Context, *connect.Request[esec.RegisterUserRequest]) (*connect.Response[esec.RegisterUserResponse], error)
	// Public key retrieval
	GetUserPublicKey(context.Context, *connect.Request[esec.GetUserPublicKeyRequest]) (*connect.Response[esec.GetUserPublicKeyResponse], error)
	// Per-user secrets
	SetPerUserSecrets(context.Context, *connect.Request[esec.SetPerUserSecretsRequest]) (*connect.Response[esec.SetPerUserSecretsResponse], error)
	GetPerUserSecrets(context.Context, *connect.Request[esec.GetPerUserSecretsRequest]) (*connect.Response[esec.GetPerUserSecretsResponse], error)
	// Creates a new team organization
	CreateOrganization(context.Context, *connect.Request[esec.CreateOrganizationRequest]) (*connect.Response[esec.CreateOrganizationResponse], error)
	// Lists organizations (currently TEAM organizations)
	ListOrganizations(context.Context, *connect.Request[esec.ListOrganizationsRequest]) (*connect.Response[esec.ListOrganizationsResponse], error)
	// Gets a specific organization by ID
	GetOrganization(context.Context, *connect.Request[esec.GetOrganizationRequest]) (*connect.Response[esec.GetOrganizationResponse], error)
	// Deletes a team organization by ID
	DeleteOrganization(context.Context, *connect.Request[esec.DeleteOrganizationRequest]) (*connect.Response[esec.DeleteOrganizationResponse], error)
}

// NewEsecServiceClient constructs a client for the esec.EsecService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEsecServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EsecServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &esecServiceClient{
		createProject: connect.NewClient[esec.CreateProjectRequest, esec.CreateProjectResponse](
			httpClient,
			baseURL+EsecServiceCreateProjectProcedure,
			connect.WithSchema(esecServiceCreateProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		registerUser: connect.NewClient[esec.RegisterUserRequest, esec.RegisterUserResponse](
			httpClient,
			baseURL+EsecServiceRegisterUserProcedure,
			connect.WithSchema(esecServiceRegisterUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUserPublicKey: connect.NewClient[esec.GetUserPublicKeyRequest, esec.GetUserPublicKeyResponse](
			httpClient,
			baseURL+EsecServiceGetUserPublicKeyProcedure,
			connect.WithSchema(esecServiceGetUserPublicKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setPerUserSecrets: connect.NewClient[esec.SetPerUserSecretsRequest, esec.SetPerUserSecretsResponse](
			httpClient,
			baseURL+EsecServiceSetPerUserSecretsProcedure,
			connect.WithSchema(esecServiceSetPerUserSecretsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPerUserSecrets: connect.NewClient[esec.GetPerUserSecretsRequest, esec.GetPerUserSecretsResponse](
			httpClient,
			baseURL+EsecServiceGetPerUserSecretsProcedure,
			connect.WithSchema(esecServiceGetPerUserSecretsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createOrganization: connect.NewClient[esec.CreateOrganizationRequest, esec.CreateOrganizationResponse](
			httpClient,
			baseURL+EsecServiceCreateOrganizationProcedure,
			connect.WithSchema(esecServiceCreateOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listOrganizations: connect.NewClient[esec.ListOrganizationsRequest, esec.ListOrganizationsResponse](
			httpClient,
			baseURL+EsecServiceListOrganizationsProcedure,
			connect.WithSchema(esecServiceListOrganizationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrganization: connect.NewClient[esec.GetOrganizationRequest, esec.GetOrganizationResponse](
			httpClient,
			baseURL+EsecServiceGetOrganizationProcedure,
			connect.WithSchema(esecServiceGetOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteOrganization: connect.NewClient[esec.DeleteOrganizationRequest, esec.DeleteOrganizationResponse](
			httpClient,
			baseURL+EsecServiceDeleteOrganizationProcedure,
			connect.WithSchema(esecServiceDeleteOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// esecServiceClient implements EsecServiceClient.
type esecServiceClient struct {
	createProject      *connect.Client[esec.CreateProjectRequest, esec.CreateProjectResponse]
	registerUser       *connect.Client[esec.RegisterUserRequest, esec.RegisterUserResponse]
	getUserPublicKey   *connect.Client[esec.GetUserPublicKeyRequest, esec.GetUserPublicKeyResponse]
	setPerUserSecrets  *connect.Client[esec.SetPerUserSecretsRequest, esec.SetPerUserSecretsResponse]
	getPerUserSecrets  *connect.Client[esec.GetPerUserSecretsRequest, esec.GetPerUserSecretsResponse]
	createOrganization *connect.Client[esec.CreateOrganizationRequest, esec.CreateOrganizationResponse]
	listOrganizations  *connect.Client[esec.ListOrganizationsRequest, esec.ListOrganizationsResponse]
	getOrganization    *connect.Client[esec.GetOrganizationRequest, esec.GetOrganizationResponse]
	deleteOrganization *connect.Client[esec.DeleteOrganizationRequest, esec.DeleteOrganizationResponse]
}

// CreateProject calls esec.EsecService.CreateProject.
func (c *esecServiceClient) CreateProject(ctx context.Context, req *connect.Request[esec.CreateProjectRequest]) (*connect.Response[esec.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// RegisterUser calls esec.EsecService.RegisterUser.
func (c *esecServiceClient) RegisterUser(ctx context.Context, req *connect.Request[esec.RegisterUserRequest]) (*connect.Response[esec.RegisterUserResponse], error) {
	return c.registerUser.CallUnary(ctx, req)
}

// GetUserPublicKey calls esec.EsecService.GetUserPublicKey.
func (c *esecServiceClient) GetUserPublicKey(ctx context.Context, req *connect.Request[esec.GetUserPublicKeyRequest]) (*connect.Response[esec.GetUserPublicKeyResponse], error) {
	return c.getUserPublicKey.CallUnary(ctx, req)
}

// SetPerUserSecrets calls esec.EsecService.SetPerUserSecrets.
func (c *esecServiceClient) SetPerUserSecrets(ctx context.Context, req *connect.Request[esec.SetPerUserSecretsRequest]) (*connect.Response[esec.SetPerUserSecretsResponse], error) {
	return c.setPerUserSecrets.CallUnary(ctx, req)
}

// GetPerUserSecrets calls esec.EsecService.GetPerUserSecrets.
func (c *esecServiceClient) GetPerUserSecrets(ctx context.Context, req *connect.Request[esec.GetPerUserSecretsRequest]) (*connect.Response[esec.GetPerUserSecretsResponse], error) {
	return c.getPerUserSecrets.CallUnary(ctx, req)
}

// CreateOrganization calls esec.EsecService.CreateOrganization.
func (c *esecServiceClient) CreateOrganization(ctx context.Context, req *connect.Request[esec.CreateOrganizationRequest]) (*connect.Response[esec.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// ListOrganizations calls esec.EsecService.ListOrganizations.
func (c *esecServiceClient) ListOrganizations(ctx context.Context, req *connect.Request[esec.ListOrganizationsRequest]) (*connect.Response[esec.ListOrganizationsResponse], error) {
	return c.listOrganizations.CallUnary(ctx, req)
}

// GetOrganization calls esec.EsecService.GetOrganization.
func (c *esecServiceClient) GetOrganization(ctx context.Context, req *connect.Request[esec.GetOrganizationRequest]) (*connect.Response[esec.GetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// DeleteOrganization calls esec.EsecService.DeleteOrganization.
func (c *esecServiceClient) DeleteOrganization(ctx context.Context, req *connect.Request[esec.DeleteOrganizationRequest]) (*connect.Response[esec.DeleteOrganizationResponse], error) {
	return c.deleteOrganization.CallUnary(ctx, req)
}

// EsecServiceHandler is an implementation of the esec.EsecService service.
type EsecServiceHandler interface {
	// Project management
	CreateProject(context.Context, *connect.Request[esec.CreateProjectRequest]) (*connect.Response[esec.CreateProjectResponse], error)
	// User registration
	RegisterUser(context.Context, *connect.Request[esec.RegisterUserRequest]) (*connect.Response[esec.RegisterUserResponse], error)
	// Public key retrieval
	GetUserPublicKey(context.Context, *connect.Request[esec.GetUserPublicKeyRequest]) (*connect.Response[esec.GetUserPublicKeyResponse], error)
	// Per-user secrets
	SetPerUserSecrets(context.Context, *connect.Request[esec.SetPerUserSecretsRequest]) (*connect.Response[esec.SetPerUserSecretsResponse], error)
	GetPerUserSecrets(context.Context, *connect.Request[esec.GetPerUserSecretsRequest]) (*connect.Response[esec.GetPerUserSecretsResponse], error)
	// Creates a new team organization
	CreateOrganization(context.Context, *connect.Request[esec.CreateOrganizationRequest]) (*connect.Response[esec.CreateOrganizationResponse], error)
	// Lists organizations (currently TEAM organizations)
	ListOrganizations(context.Context, *connect.Request[esec.ListOrganizationsRequest]) (*connect.Response[esec.ListOrganizationsResponse], error)
	// Gets a specific organization by ID
	GetOrganization(context.Context, *connect.Request[esec.GetOrganizationRequest]) (*connect.Response[esec.GetOrganizationResponse], error)
	// Deletes a team organization by ID
	DeleteOrganization(context.Context, *connect.Request[esec.DeleteOrganizationRequest]) (*connect.Response[esec.DeleteOrganizationResponse], error)
}

// NewEsecServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEsecServiceHandler(svc EsecServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	esecServiceCreateProjectHandler := connect.NewUnaryHandler(
		EsecServiceCreateProjectProcedure,
		svc.CreateProject,
		connect.WithSchema(esecServiceCreateProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	esecServiceRegisterUserHandler := connect.NewUnaryHandler(
		EsecServiceRegisterUserProcedure,
		svc.RegisterUser,
		connect.WithSchema(esecServiceRegisterUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	esecServiceGetUserPublicKeyHandler := connect.NewUnaryHandler(
		EsecServiceGetUserPublicKeyProcedure,
		svc.GetUserPublicKey,
		connect.WithSchema(esecServiceGetUserPublicKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	esecServiceSetPerUserSecretsHandler := connect.NewUnaryHandler(
		EsecServiceSetPerUserSecretsProcedure,
		svc.SetPerUserSecrets,
		connect.WithSchema(esecServiceSetPerUserSecretsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	esecServiceGetPerUserSecretsHandler := connect.NewUnaryHandler(
		EsecServiceGetPerUserSecretsProcedure,
		svc.GetPerUserSecrets,
		connect.WithSchema(esecServiceGetPerUserSecretsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	esecServiceCreateOrganizationHandler := connect.NewUnaryHandler(
		EsecServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		connect.WithSchema(esecServiceCreateOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	esecServiceListOrganizationsHandler := connect.NewUnaryHandler(
		EsecServiceListOrganizationsProcedure,
		svc.ListOrganizations,
		connect.WithSchema(esecServiceListOrganizationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	esecServiceGetOrganizationHandler := connect.NewUnaryHandler(
		EsecServiceGetOrganizationProcedure,
		svc.GetOrganization,
		connect.WithSchema(esecServiceGetOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	esecServiceDeleteOrganizationHandler := connect.NewUnaryHandler(
		EsecServiceDeleteOrganizationProcedure,
		svc.DeleteOrganization,
		connect.WithSchema(esecServiceDeleteOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/esec.EsecService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EsecServiceCreateProjectProcedure:
			esecServiceCreateProjectHandler.ServeHTTP(w, r)
		case EsecServiceRegisterUserProcedure:
			esecServiceRegisterUserHandler.ServeHTTP(w, r)
		case EsecServiceGetUserPublicKeyProcedure:
			esecServiceGetUserPublicKeyHandler.ServeHTTP(w, r)
		case EsecServiceSetPerUserSecretsProcedure:
			esecServiceSetPerUserSecretsHandler.ServeHTTP(w, r)
		case EsecServiceGetPerUserSecretsProcedure:
			esecServiceGetPerUserSecretsHandler.ServeHTTP(w, r)
		case EsecServiceCreateOrganizationProcedure:
			esecServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case EsecServiceListOrganizationsProcedure:
			esecServiceListOrganizationsHandler.ServeHTTP(w, r)
		case EsecServiceGetOrganizationProcedure:
			esecServiceGetOrganizationHandler.ServeHTTP(w, r)
		case EsecServiceDeleteOrganizationProcedure:
			esecServiceDeleteOrganizationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEsecServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEsecServiceHandler struct{}

func (UnimplementedEsecServiceHandler) CreateProject(context.Context, *connect.Request[esec.CreateProjectRequest]) (*connect.Response[esec.CreateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("esec.EsecService.CreateProject is not implemented"))
}

func (UnimplementedEsecServiceHandler) RegisterUser(context.Context, *connect.Request[esec.RegisterUserRequest]) (*connect.Response[esec.RegisterUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("esec.EsecService.RegisterUser is not implemented"))
}

func (UnimplementedEsecServiceHandler) GetUserPublicKey(context.Context, *connect.Request[esec.GetUserPublicKeyRequest]) (*connect.Response[esec.GetUserPublicKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("esec.EsecService.GetUserPublicKey is not implemented"))
}

func (UnimplementedEsecServiceHandler) SetPerUserSecrets(context.Context, *connect.Request[esec.SetPerUserSecretsRequest]) (*connect.Response[esec.SetPerUserSecretsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("esec.EsecService.SetPerUserSecrets is not implemented"))
}

func (UnimplementedEsecServiceHandler) GetPerUserSecrets(context.Context, *connect.Request[esec.GetPerUserSecretsRequest]) (*connect.Response[esec.GetPerUserSecretsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("esec.EsecService.GetPerUserSecrets is not implemented"))
}

func (UnimplementedEsecServiceHandler) CreateOrganization(context.Context, *connect.Request[esec.CreateOrganizationRequest]) (*connect.Response[esec.CreateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("esec.EsecService.CreateOrganization is not implemented"))
}

func (UnimplementedEsecServiceHandler) ListOrganizations(context.Context, *connect.Request[esec.ListOrganizationsRequest]) (*connect.Response[esec.ListOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("esec.EsecService.ListOrganizations is not implemented"))
}

func (UnimplementedEsecServiceHandler) GetOrganization(context.Context, *connect.Request[esec.GetOrganizationRequest]) (*connect.Response[esec.GetOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("esec.EsecService.GetOrganization is not implemented"))
}

func (UnimplementedEsecServiceHandler) DeleteOrganization(context.Context, *connect.Request[esec.DeleteOrganizationRequest]) (*connect.Response[esec.DeleteOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("esec.EsecService.DeleteOrganization is not implemented"))
}
